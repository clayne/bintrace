From 62be9027c29faa869177a0c3b328792c9792d845 Mon Sep 17 00:00:00 2001
From: Matt Borgerson <contact@mborgerson.com>
Date: Wed, 17 Nov 2021 00:28:58 -0700
Subject: [PATCH 1/4] Fixes to support tracing

---
 accel/tcg/atomic_common.c.inc | 14 ++++-----
 accel/tcg/atomic_template.h   | 20 ++++++------
 accel/tcg/cputlb.c            |  4 +--
 accel/tcg/plugin-gen.c        | 23 ++++++++------
 accel/tcg/plugin-helpers.h    |  2 +-
 accel/tcg/user-exec.c         | 34 ++++++++++-----------
 include/exec/plugin-gen.h     |  4 +--
 include/qemu/plugin.h         |  7 +++--
 include/qemu/qemu-plugin.h    | 30 +++++++++++++++++-
 linux-user/qemu.h             |  7 ++++-
 plugins/api.c                 |  6 ++++
 plugins/core.c                | 57 +++++++++++++++++++++++++++++++++--
 target/i386/gdbstub.c         |  2 +-
 tcg/tcg-op.c                  | 22 ++++++++++----
 14 files changed, 170 insertions(+), 62 deletions(-)

diff --git a/accel/tcg/atomic_common.c.inc b/accel/tcg/atomic_common.c.inc
index 6c0339f..e24b9fc 100644
--- a/accel/tcg/atomic_common.c.inc
+++ b/accel/tcg/atomic_common.c.inc
@@ -26,10 +26,10 @@ static uint16_t atomic_trace_rmw_pre(CPUArchState *env, target_ulong addr,
 }
 
 static void atomic_trace_rmw_post(CPUArchState *env, target_ulong addr,
-                                  uint16_t info)
+                                  uint16_t info, uint64_t val)
 {
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, info);
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, info | TRACE_MEM_ST);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, info, val); /* FIXME */
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, info | TRACE_MEM_ST, val);
 }
 
 #if HAVE_ATOMIC128
@@ -44,9 +44,9 @@ static uint16_t atomic_trace_ld_pre(CPUArchState *env, target_ulong addr,
 }
 
 static void atomic_trace_ld_post(CPUArchState *env, target_ulong addr,
-                                 uint16_t info)
+                                 uint16_t info, uint64_t val)
 {
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, info);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, info, val);
 }
 
 static uint16_t atomic_trace_st_pre(CPUArchState *env, target_ulong addr,
@@ -60,9 +60,9 @@ static uint16_t atomic_trace_st_pre(CPUArchState *env, target_ulong addr,
 }
 
 static void atomic_trace_st_post(CPUArchState *env, target_ulong addr,
-                                 uint16_t info)
+                                 uint16_t info, uint64_t val)
 {
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, info);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, info, val);
 }
 #endif
 
diff --git a/accel/tcg/atomic_template.h b/accel/tcg/atomic_template.h
index 8098a1b..1f1ad4e 100644
--- a/accel/tcg/atomic_template.h
+++ b/accel/tcg/atomic_template.h
@@ -85,7 +85,7 @@ ABI_TYPE ATOMIC_NAME(cmpxchg)(CPUArchState *env, target_ulong addr,
     ret = qatomic_cmpxchg__nocheck(haddr, cmpv, newv);
 #endif
     ATOMIC_MMU_CLEANUP;
-    atomic_trace_rmw_post(env, addr, info);
+    atomic_trace_rmw_post(env, addr, info, newv);
     return ret;
 }
 
@@ -101,7 +101,7 @@ ABI_TYPE ATOMIC_NAME(ld)(CPUArchState *env, target_ulong addr,
 
     val = atomic16_read(haddr);
     ATOMIC_MMU_CLEANUP;
-    atomic_trace_ld_post(env, addr, info);
+    atomic_trace_ld_post(env, addr, info, val);
     return val;
 }
 
@@ -114,7 +114,7 @@ void ATOMIC_NAME(st)(CPUArchState *env, target_ulong addr, ABI_TYPE val,
 
     atomic16_set(haddr, val);
     ATOMIC_MMU_CLEANUP;
-    atomic_trace_st_post(env, addr, info);
+    atomic_trace_st_post(env, addr, info, val);
 }
 #endif
 #else
@@ -128,7 +128,7 @@ ABI_TYPE ATOMIC_NAME(xchg)(CPUArchState *env, target_ulong addr, ABI_TYPE val,
 
     ret = qatomic_xchg__nocheck(haddr, val);
     ATOMIC_MMU_CLEANUP;
-    atomic_trace_rmw_post(env, addr, info);
+    atomic_trace_rmw_post(env, addr, info, val);
     return ret;
 }
 
@@ -142,7 +142,7 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_ulong addr,       \
     uint16_t info = atomic_trace_rmw_pre(env, addr, oi);            \
     ret = qatomic_##X(haddr, val);                                  \
     ATOMIC_MMU_CLEANUP;                                             \
-    atomic_trace_rmw_post(env, addr, info);                         \
+    atomic_trace_rmw_post(env, addr, info, val);                    \
     return ret;                                                     \
 }
 
@@ -180,7 +180,7 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_ulong addr,       \
         cmp = qatomic_cmpxchg__nocheck(haddr, old, new);            \
     } while (cmp != old);                                           \
     ATOMIC_MMU_CLEANUP;                                             \
-    atomic_trace_rmw_post(env, addr, info);                         \
+    atomic_trace_rmw_post(env, addr, info, new);                    \
     return RET;                                                     \
 }
 
@@ -224,7 +224,7 @@ ABI_TYPE ATOMIC_NAME(cmpxchg)(CPUArchState *env, target_ulong addr,
     ret = qatomic_cmpxchg__nocheck(haddr, BSWAP(cmpv), BSWAP(newv));
 #endif
     ATOMIC_MMU_CLEANUP;
-    atomic_trace_rmw_post(env, addr, info);
+    atomic_trace_rmw_post(env, addr, info, newv);
     return BSWAP(ret);
 }
 
@@ -268,7 +268,7 @@ ABI_TYPE ATOMIC_NAME(xchg)(CPUArchState *env, target_ulong addr, ABI_TYPE val,
 
     ret = qatomic_xchg__nocheck(haddr, BSWAP(val));
     ATOMIC_MMU_CLEANUP;
-    atomic_trace_rmw_post(env, addr, info);
+    atomic_trace_rmw_post(env, addr, info, BSWAP(val));
     return BSWAP(ret);
 }
 
@@ -282,7 +282,7 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_ulong addr,       \
     uint16_t info = atomic_trace_rmw_pre(env, addr, oi);            \
     ret = qatomic_##X(haddr, BSWAP(val));                           \
     ATOMIC_MMU_CLEANUP;                                             \
-    atomic_trace_rmw_post(env, addr, info);                         \
+    atomic_trace_rmw_post(env, addr, info, BSWAP(val));             \
     return BSWAP(ret);                                              \
 }
 
@@ -317,7 +317,7 @@ ABI_TYPE ATOMIC_NAME(X)(CPUArchState *env, target_ulong addr,       \
         ldn = qatomic_cmpxchg__nocheck(haddr, ldo, BSWAP(new));     \
     } while (ldo != ldn);                                           \
     ATOMIC_MMU_CLEANUP;                                             \
-    atomic_trace_rmw_post(env, addr, info);                         \
+    atomic_trace_rmw_post(env, addr, info, BSWAP(new));             \
     return RET;                                                     \
 }
 
diff --git a/accel/tcg/cputlb.c b/accel/tcg/cputlb.c
index b1e5471..4be6195 100644
--- a/accel/tcg/cputlb.c
+++ b/accel/tcg/cputlb.c
@@ -2123,7 +2123,7 @@ static inline uint64_t cpu_load_helper(CPUArchState *env, abi_ptr addr,
     oi = make_memop_idx(op, mmu_idx);
     ret = full_load(env, addr, oi, retaddr);
 
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, meminfo, ret);
 
     return ret;
 }
@@ -2564,7 +2564,7 @@ cpu_store_helper(CPUArchState *env, target_ulong addr, uint64_t val,
     oi = make_memop_idx(op, mmu_idx);
     store_helper(env, addr, val, oi, retaddr, op);
 
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), addr, meminfo, ret);
 }
 
 void cpu_stb_mmuidx_ra(CPUArchState *env, target_ulong addr, uint32_t val,
diff --git a/accel/tcg/plugin-gen.c b/accel/tcg/plugin-gen.c
index 88e25c6..6d56749 100644
--- a/accel/tcg/plugin-gen.c
+++ b/accel/tcg/plugin-gen.c
@@ -89,10 +89,11 @@ void HELPER(plugin_vcpu_udata_cb)(uint32_t cpu_index, void *udata)
 
 void HELPER(plugin_vcpu_mem_cb)(unsigned int vcpu_index,
                                 qemu_plugin_meminfo_t info, uint64_t vaddr,
+                                uint64_t val,
                                 void *userdata)
 { }
 
-static void do_gen_mem_cb(TCGv vaddr, uint32_t info)
+static void do_gen_mem_cb(TCGv vaddr, TCGv_i64 val, uint32_t info)
 {
     TCGv_i32 cpu_index = tcg_temp_new_i32();
     TCGv_i32 meminfo = tcg_const_i32(info);
@@ -103,7 +104,9 @@ static void do_gen_mem_cb(TCGv vaddr, uint32_t info)
                    -offsetof(ArchCPU, env) + offsetof(CPUState, cpu_index));
     tcg_gen_extu_tl_i64(vaddr64, vaddr);
 
-    gen_helper_plugin_vcpu_mem_cb(cpu_index, meminfo, vaddr64, udata);
+    // TCGv_i64 blah = tcg_const_i64(0xc0debabe);
+
+    gen_helper_plugin_vcpu_mem_cb(cpu_index, meminfo, vaddr64, val, udata);
 
     tcg_temp_free_ptr(udata);
     tcg_temp_free_i64(vaddr64);
@@ -141,9 +144,9 @@ static void gen_empty_inline_cb(void)
     tcg_temp_free_i64(val);
 }
 
-static void gen_empty_mem_cb(TCGv addr, uint32_t info)
+static void gen_empty_mem_cb(TCGv addr, uint32_t info, TCGv_i64 val)
 {
-    do_gen_mem_cb(addr, info);
+    do_gen_mem_cb(addr, val, info);
 }
 
 /*
@@ -203,34 +206,34 @@ static void plugin_gen_empty_callback(enum plugin_gen_from from)
 }
 
 union mem_gen_fn {
-    void (*mem_fn)(TCGv, uint32_t);
+    void (*mem_fn)(TCGv, uint32_t, TCGv_i64);
     void (*inline_fn)(void);
 };
 
 static void gen_mem_wrapped(enum plugin_gen_cb type,
-                            const union mem_gen_fn *f, TCGv addr,
+                            const union mem_gen_fn *f, TCGv addr, TCGv_i64 val,
                             uint32_t info, bool is_mem)
 {
     int wr = !!(info & TRACE_MEM_ST);
 
     gen_plugin_cb_start(PLUGIN_GEN_FROM_MEM, type, wr);
     if (is_mem) {
-        f->mem_fn(addr, info);
+        f->mem_fn(addr, info, val);
     } else {
         f->inline_fn();
     }
     tcg_gen_plugin_cb_end();
 }
 
-void plugin_gen_empty_mem_callback(TCGv addr, uint32_t info)
+void plugin_gen_empty_mem_callback(TCGv addr, uint32_t info, TCGv_i64 val)
 {
     union mem_gen_fn fn;
 
     fn.mem_fn = gen_empty_mem_cb;
-    gen_mem_wrapped(PLUGIN_GEN_CB_MEM, &fn, addr, info, true);
+    gen_mem_wrapped(PLUGIN_GEN_CB_MEM, &fn, addr, val, info, true);
 
     fn.inline_fn = gen_empty_inline_cb;
-    gen_mem_wrapped(PLUGIN_GEN_CB_INLINE, &fn, 0, info, false);
+    gen_mem_wrapped(PLUGIN_GEN_CB_INLINE, &fn, 0, 0, info, false);
 }
 
 static TCGOp *find_op(TCGOp *op, TCGOpcode opc)
diff --git a/accel/tcg/plugin-helpers.h b/accel/tcg/plugin-helpers.h
index 9829abe..a125a9d 100644
--- a/accel/tcg/plugin-helpers.h
+++ b/accel/tcg/plugin-helpers.h
@@ -1,4 +1,4 @@
 #ifdef CONFIG_PLUGIN
 DEF_HELPER_FLAGS_2(plugin_vcpu_udata_cb, TCG_CALL_NO_RWG, void, i32, ptr)
-DEF_HELPER_FLAGS_4(plugin_vcpu_mem_cb, TCG_CALL_NO_RWG, void, i32, i32, i64, ptr)
+DEF_HELPER_FLAGS_5(plugin_vcpu_mem_cb, TCG_CALL_NO_RWG, void, i32, i32, i64, i64, ptr)
 #endif
diff --git a/accel/tcg/user-exec.c b/accel/tcg/user-exec.c
index 90d1a2d..839559a 100644
--- a/accel/tcg/user-exec.c
+++ b/accel/tcg/user-exec.c
@@ -859,7 +859,7 @@ uint32_t cpu_ldub_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = ldub_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -870,7 +870,7 @@ int cpu_ldsb_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = ldsb_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -881,7 +881,7 @@ uint32_t cpu_lduw_be_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = lduw_be_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -892,7 +892,7 @@ int cpu_ldsw_be_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = ldsw_be_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -903,7 +903,7 @@ uint32_t cpu_ldl_be_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = ldl_be_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -914,7 +914,7 @@ uint64_t cpu_ldq_be_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = ldq_be_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -925,7 +925,7 @@ uint32_t cpu_lduw_le_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = lduw_le_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -936,7 +936,7 @@ int cpu_ldsw_le_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = ldsw_le_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -947,7 +947,7 @@ uint32_t cpu_ldl_le_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = ldl_le_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -958,7 +958,7 @@ uint64_t cpu_ldq_le_data(CPUArchState *env, abi_ptr ptr)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     ret = ldq_le_p(g2h(env_cpu(env), ptr));
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, ret);
     return ret;
 }
 
@@ -1068,7 +1068,7 @@ void cpu_stb_data(CPUArchState *env, abi_ptr ptr, uint32_t val)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     stb_p(g2h(env_cpu(env), ptr), val);
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, val);
 }
 
 void cpu_stw_be_data(CPUArchState *env, abi_ptr ptr, uint32_t val)
@@ -1077,7 +1077,7 @@ void cpu_stw_be_data(CPUArchState *env, abi_ptr ptr, uint32_t val)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     stw_be_p(g2h(env_cpu(env), ptr), val);
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, val);
 }
 
 void cpu_stl_be_data(CPUArchState *env, abi_ptr ptr, uint32_t val)
@@ -1086,7 +1086,7 @@ void cpu_stl_be_data(CPUArchState *env, abi_ptr ptr, uint32_t val)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     stl_be_p(g2h(env_cpu(env), ptr), val);
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, val);
 }
 
 void cpu_stq_be_data(CPUArchState *env, abi_ptr ptr, uint64_t val)
@@ -1095,7 +1095,7 @@ void cpu_stq_be_data(CPUArchState *env, abi_ptr ptr, uint64_t val)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     stq_be_p(g2h(env_cpu(env), ptr), val);
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, val);
 }
 
 void cpu_stw_le_data(CPUArchState *env, abi_ptr ptr, uint32_t val)
@@ -1104,7 +1104,7 @@ void cpu_stw_le_data(CPUArchState *env, abi_ptr ptr, uint32_t val)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     stw_le_p(g2h(env_cpu(env), ptr), val);
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, val);
 }
 
 void cpu_stl_le_data(CPUArchState *env, abi_ptr ptr, uint32_t val)
@@ -1113,7 +1113,7 @@ void cpu_stl_le_data(CPUArchState *env, abi_ptr ptr, uint32_t val)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     stl_le_p(g2h(env_cpu(env), ptr), val);
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, val);
 }
 
 void cpu_stq_le_data(CPUArchState *env, abi_ptr ptr, uint64_t val)
@@ -1122,7 +1122,7 @@ void cpu_stq_le_data(CPUArchState *env, abi_ptr ptr, uint64_t val)
 
     trace_guest_mem_before_exec(env_cpu(env), ptr, meminfo);
     stq_le_p(g2h(env_cpu(env), ptr), val);
-    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo);
+    qemu_plugin_vcpu_mem_cb(env_cpu(env), ptr, meminfo, val);
 }
 
 void cpu_stb_data_ra(CPUArchState *env, abi_ptr ptr,
diff --git a/include/exec/plugin-gen.h b/include/exec/plugin-gen.h
index b1b72b5..70db77f 100644
--- a/include/exec/plugin-gen.h
+++ b/include/exec/plugin-gen.h
@@ -25,7 +25,7 @@ void plugin_gen_insn_start(CPUState *cpu, const struct DisasContextBase *db);
 void plugin_gen_insn_end(void);
 
 void plugin_gen_disable_mem_helpers(void);
-void plugin_gen_empty_mem_callback(TCGv addr, uint32_t info);
+void plugin_gen_empty_mem_callback(TCGv addr, uint32_t info, TCGv_i64 val);
 
 static inline void plugin_insn_append(const void *from, size_t size)
 {
@@ -59,7 +59,7 @@ static inline void plugin_gen_tb_end(CPUState *cpu)
 static inline void plugin_gen_disable_mem_helpers(void)
 { }
 
-static inline void plugin_gen_empty_mem_callback(TCGv addr, uint32_t info)
+static inline void plugin_gen_empty_mem_callback(TCGv addr, uint32_t info, TCGv_i64 val)
 { }
 
 static inline void plugin_insn_append(const void *from, size_t size)
diff --git a/include/qemu/plugin.h b/include/qemu/plugin.h
index 9a8438f..53eaf48 100644
--- a/include/qemu/plugin.h
+++ b/include/qemu/plugin.h
@@ -26,6 +26,7 @@ enum qemu_plugin_event {
     QEMU_PLUGIN_EV_VCPU_SYSCALL_RET,
     QEMU_PLUGIN_EV_FLUSH,
     QEMU_PLUGIN_EV_ATEXIT,
+    QEMU_PLUGIN_EV_VCPU_USER_WRITE,
     QEMU_PLUGIN_EV_MAX, /* total number of plugin events we support */
 };
 
@@ -56,6 +57,7 @@ union qemu_plugin_cb_sig {
     qemu_plugin_vcpu_mem_cb_t        vcpu_mem;
     qemu_plugin_vcpu_syscall_cb_t    vcpu_syscall;
     qemu_plugin_vcpu_syscall_ret_cb_t vcpu_syscall_ret;
+    qemu_plugin_vcpu_user_write_cb_t vcpu_user_write;
     void *generic;
 };
 
@@ -174,13 +176,14 @@ void qemu_plugin_vcpu_exit_hook(CPUState *cpu);
 void qemu_plugin_tb_trans_cb(CPUState *cpu, struct qemu_plugin_tb *tb);
 void qemu_plugin_vcpu_idle_cb(CPUState *cpu);
 void qemu_plugin_vcpu_resume_cb(CPUState *cpu);
+void qemu_plugin_vcpu_user_write(CPUState *cpu, uint64_t vaddr, void *data, size_t len);
 void
 qemu_plugin_vcpu_syscall(CPUState *cpu, int64_t num, uint64_t a1,
                          uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5,
                          uint64_t a6, uint64_t a7, uint64_t a8);
 void qemu_plugin_vcpu_syscall_ret(CPUState *cpu, int64_t num, int64_t ret);
 
-void qemu_plugin_vcpu_mem_cb(CPUState *cpu, uint64_t vaddr, uint32_t meminfo);
+void qemu_plugin_vcpu_mem_cb(CPUState *cpu, uint64_t vaddr, uint32_t meminfo, uint64_t val);
 
 void qemu_plugin_flush_cb(void);
 
@@ -244,7 +247,7 @@ void qemu_plugin_vcpu_syscall_ret(CPUState *cpu, int64_t num, int64_t ret)
 { }
 
 static inline void qemu_plugin_vcpu_mem_cb(CPUState *cpu, uint64_t vaddr,
-                                           uint32_t meminfo)
+                                           uint32_t meminfo, uint64_t val)
 { }
 
 static inline void qemu_plugin_flush_cb(void)
diff --git a/include/qemu/qemu-plugin.h b/include/qemu/qemu-plugin.h
index e6e815a..ecded54 100644
--- a/include/qemu/qemu-plugin.h
+++ b/include/qemu/qemu-plugin.h
@@ -210,6 +210,25 @@ struct qemu_plugin_tb;
 /** struct qemu_plugin_insn - Opaque handle for a translated instruction */
 struct qemu_plugin_insn;
 
+
+struct qemu_plugin_register_desc {
+    size_t len;
+    union {
+        uint32_t data_32u;
+        uint64_t data_64u;
+        unsigned char data[64];
+    };
+};
+
+/**
+ * Get register description and value.
+ *
+ * Returns `true` if the call was successful, otherwise `false`.
+ */
+bool qemu_plugin_get_register(unsigned int vcpu_index, unsigned int reg_index,
+                              struct qemu_plugin_register_desc *desc);
+
+
 /**
  * enum qemu_plugin_cb_flags - type of callback
  *
@@ -483,7 +502,7 @@ const char *qemu_plugin_hwaddr_device_name(const struct qemu_plugin_hwaddr *h);
 typedef void
 (*qemu_plugin_vcpu_mem_cb_t)(unsigned int vcpu_index,
                              qemu_plugin_meminfo_t info, uint64_t vaddr,
-                             void *userdata);
+                             uint64_t val, void *userdata);
 
 void qemu_plugin_register_vcpu_mem_cb(struct qemu_plugin_insn *insn,
                                       qemu_plugin_vcpu_mem_cb_t cb,
@@ -496,7 +515,16 @@ void qemu_plugin_register_vcpu_mem_inline(struct qemu_plugin_insn *insn,
                                           enum qemu_plugin_op op, void *ptr,
                                           uint64_t imm);
 
+/*
+ * Register callback to catch writes made to guest memory, specifically after
+ * syscalls.
+ */
+typedef void
+(*qemu_plugin_vcpu_user_write_cb_t)(qemu_plugin_id_t id, unsigned int vcpu_idx,
+                                    uint64_t vaddr, void *data, size_t len);
 
+void qemu_plugin_register_vcpu_user_write_cb(
+    qemu_plugin_id_t id, qemu_plugin_vcpu_user_write_cb_t cb);
 
 typedef void
 (*qemu_plugin_vcpu_syscall_cb_t)(qemu_plugin_id_t id, unsigned int vcpu_index,
diff --git a/linux-user/qemu.h b/linux-user/qemu.h
index 3b0b6b7..17846da 100644
--- a/linux-user/qemu.h
+++ b/linux-user/qemu.h
@@ -648,7 +648,12 @@ void *lock_user(int type, abi_ulong guest_addr, ssize_t len, bool copy);
 static inline void unlock_user(void *host_ptr, abi_ulong guest_addr,
                                ssize_t len)
 {
-    /* no-op */
+    if (len > 0) {
+        /* Typically len > 0 after some write operation. We hack it on here
+         * for convenience.
+         */
+        qemu_plugin_vcpu_user_write(thread_cpu, guest_addr, host_ptr, len);
+    }
 }
 #else
 void unlock_user(void *host_ptr, abi_ulong guest_addr, ssize_t len);
diff --git a/plugins/api.c b/plugins/api.c
index 2d521e6..21156d0 100644
--- a/plugins/api.c
+++ b/plugins/api.c
@@ -149,6 +149,12 @@ void qemu_plugin_register_vcpu_tb_trans_cb(qemu_plugin_id_t id,
     plugin_register_cb(id, QEMU_PLUGIN_EV_VCPU_TB_TRANS, cb);
 }
 
+void qemu_plugin_register_vcpu_user_write_cb(
+    qemu_plugin_id_t id, qemu_plugin_vcpu_user_write_cb_t cb)
+{
+    plugin_register_cb(id, QEMU_PLUGIN_EV_VCPU_USER_WRITE, cb);
+}
+
 void qemu_plugin_register_vcpu_syscall_cb(qemu_plugin_id_t id,
                                           qemu_plugin_vcpu_syscall_cb_t cb)
 {
diff --git a/plugins/core.c b/plugins/core.c
index 6b2490f..69eb2a5 100644
--- a/plugins/core.c
+++ b/plugins/core.c
@@ -265,6 +265,37 @@ void qemu_plugin_vcpu_for_each(qemu_plugin_id_t id,
     qemu_rec_mutex_unlock(&plugin.lock);
 }
 
+bool qemu_plugin_get_register(unsigned int vcpu_index, unsigned int reg_index,
+                              struct qemu_plugin_register_desc *desc)
+{
+    // hw/core/cpu.h
+    CPUState *cpu = qemu_get_cpu(vcpu_index);
+    CPUClass *cc = CPU_GET_CLASS(cpu);
+    // CPUArchState *env = cpu->env_ptr;
+    // there's also env->regs[gpr_map[n]], but using gdb for now to be
+    // consistent with external definitions
+
+    /*
+        R_EAX, R_EBX, R_ECX, R_EDX, R_ESI, R_EDI, R_EBP, R_ESP,
+    8, 9, 10, 11, 12, 13, 14, 15
+    */
+
+    if (reg_index < cc->gdb_num_core_regs) {
+        GByteArray *arr = g_byte_array_sized_new(16);
+        desc->len = cc->gdb_read_register(cpu, arr, reg_index);
+        assert(desc->len < sizeof(desc->data));
+        memcpy(desc->data, arr->data, desc->len);
+        size_t bytes_left = sizeof(desc->data)-desc->len;
+        if (bytes_left) {
+            memset(&desc->data[desc->len], 0, bytes_left);
+        }
+        g_byte_array_unref(arr);
+        return true;
+    }
+
+    return false;
+}
+
 /* Allocate and return a callback record */
 static struct qemu_plugin_dyn_cb *plugin_get_dyn_cb(GArray **arr)
 {
@@ -344,6 +375,28 @@ void qemu_plugin_tb_trans_cb(CPUState *cpu, struct qemu_plugin_tb *tb)
     }
 }
 
+/*
+ * Disable CFI checks.
+ * The callback function has been loaded from an external library so we do not
+ * have type information
+ */
+QEMU_DISABLE_CFI
+void
+qemu_plugin_vcpu_user_write(CPUState *cpu, uint64_t vaddr, void *data, size_t len)
+{
+    struct qemu_plugin_cb *cb, *next;
+    enum qemu_plugin_event ev = QEMU_PLUGIN_EV_VCPU_USER_WRITE;
+
+    if (!test_bit(ev, cpu->plugin_mask)) {
+        return;
+    }
+
+    QLIST_FOREACH_SAFE_RCU(cb, &plugin.cb_lists[ev], entry, next) {
+        qemu_plugin_vcpu_user_write_cb_t func = cb->f.vcpu_user_write;
+        func(cb->ctx->id, cpu->cpu_index, vaddr, data, len);
+    }
+}
+
 /*
  * Disable CFI checks.
  * The callback function has been loaded from an external library so we do not
@@ -446,7 +499,7 @@ void exec_inline_op(struct qemu_plugin_dyn_cb *cb)
     }
 }
 
-void qemu_plugin_vcpu_mem_cb(CPUState *cpu, uint64_t vaddr, uint32_t info)
+void qemu_plugin_vcpu_mem_cb(CPUState *cpu, uint64_t vaddr, uint32_t info, uint64_t val)
 {
     GArray *arr = cpu->plugin_mem_cbs;
     size_t i;
@@ -464,7 +517,7 @@ void qemu_plugin_vcpu_mem_cb(CPUState *cpu, uint64_t vaddr, uint32_t info)
         }
         switch (cb->type) {
         case PLUGIN_CB_REGULAR:
-            cb->f.vcpu_mem(cpu->cpu_index, info, vaddr, cb->userp);
+            cb->f.vcpu_mem(cpu->cpu_index, info, vaddr, val, cb->userp);
             break;
         case PLUGIN_CB_INLINE:
             exec_inline_op(cb);
diff --git a/target/i386/gdbstub.c b/target/i386/gdbstub.c
index 098a2ad..db13662 100644
--- a/target/i386/gdbstub.c
+++ b/target/i386/gdbstub.c
@@ -145,7 +145,7 @@ int x86_cpu_gdb_read_register(CPUState *cs, GByteArray *mem_buf, int n)
                 return gdb_get_reg32(mem_buf, env->eip);
             }
         case IDX_FLAGS_REG:
-            return gdb_get_reg32(mem_buf, env->eflags);
+            return gdb_get_reg32(mem_buf, cpu_compute_eflags(env));
 
         case IDX_SEG_REGS:
             return gdb_get_reg32(mem_buf, env->segs[R_CS].selector);
diff --git a/tcg/tcg-op.c b/tcg/tcg-op.c
index c754396..ba24406 100644
--- a/tcg/tcg-op.c
+++ b/tcg/tcg-op.c
@@ -2850,11 +2850,11 @@ static inline TCGv plugin_prep_mem_callbacks(TCGv vaddr)
     return vaddr;
 }
 
-static inline void plugin_gen_mem_callbacks(TCGv vaddr, uint16_t info)
+static inline void plugin_gen_mem_callbacks(TCGv vaddr, uint16_t info, TCGv_i64 val)
 {
 #ifdef CONFIG_PLUGIN
     if (tcg_ctx->plugin_insn != NULL) {
-        plugin_gen_empty_mem_callback(vaddr, info);
+        plugin_gen_empty_mem_callback(vaddr, info, val);
         tcg_temp_free(vaddr);
     }
 #endif
@@ -2880,7 +2880,6 @@ void tcg_gen_qemu_ld_i32(TCGv_i32 val, TCGv addr, TCGArg idx, MemOp memop)
 
     addr = plugin_prep_mem_callbacks(addr);
     gen_ldst_i32(INDEX_op_qemu_ld_i32, val, addr, memop, idx);
-    plugin_gen_mem_callbacks(addr, info);
 
     if ((orig_memop ^ memop) & MO_BSWAP) {
         switch (orig_memop & MO_SIZE) {
@@ -2896,6 +2895,11 @@ void tcg_gen_qemu_ld_i32(TCGv_i32 val, TCGv addr, TCGArg idx, MemOp memop)
             g_assert_not_reached();
         }
     }
+
+    TCGv_i64 val64 = tcg_temp_new_i64();
+    tcg_gen_ext_i32_i64(val64, val);
+    plugin_gen_mem_callbacks(addr, info, val64);
+    tcg_temp_free_i64(val64);
 }
 
 void tcg_gen_qemu_st_i32(TCGv_i32 val, TCGv addr, TCGArg idx, MemOp memop)
@@ -2929,7 +2933,12 @@ void tcg_gen_qemu_st_i32(TCGv_i32 val, TCGv addr, TCGArg idx, MemOp memop)
     } else {
         gen_ldst_i32(INDEX_op_qemu_st_i32, val, addr, memop, idx);
     }
-    plugin_gen_mem_callbacks(addr, info);
+
+
+    TCGv_i64 val64 = tcg_temp_new_i64();
+    tcg_gen_ext_i32_i64(val64, val);
+    plugin_gen_mem_callbacks(addr, info, val64);
+    tcg_temp_free_i64(val64);
 
     if (swap) {
         tcg_temp_free_i32(swap);
@@ -2967,7 +2976,6 @@ void tcg_gen_qemu_ld_i64(TCGv_i64 val, TCGv addr, TCGArg idx, MemOp memop)
 
     addr = plugin_prep_mem_callbacks(addr);
     gen_ldst_i64(INDEX_op_qemu_ld_i64, val, addr, memop, idx);
-    plugin_gen_mem_callbacks(addr, info);
 
     if ((orig_memop ^ memop) & MO_BSWAP) {
         int flags = (orig_memop & MO_SIGN
@@ -2987,6 +2995,8 @@ void tcg_gen_qemu_ld_i64(TCGv_i64 val, TCGv addr, TCGArg idx, MemOp memop)
             g_assert_not_reached();
         }
     }
+
+    plugin_gen_mem_callbacks(addr, info, val);
 }
 
 void tcg_gen_qemu_st_i64(TCGv_i64 val, TCGv addr, TCGArg idx, MemOp memop)
@@ -3025,7 +3035,7 @@ void tcg_gen_qemu_st_i64(TCGv_i64 val, TCGv addr, TCGArg idx, MemOp memop)
 
     addr = plugin_prep_mem_callbacks(addr);
     gen_ldst_i64(INDEX_op_qemu_st_i64, val, addr, memop, idx);
-    plugin_gen_mem_callbacks(addr, info);
+    plugin_gen_mem_callbacks(addr, info, val);
 
     if (swap) {
         tcg_temp_free_i64(swap);
-- 
2.25.1

